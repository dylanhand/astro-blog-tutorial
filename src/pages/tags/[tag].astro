---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';
import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths } from 'astro';
import type { Frontmatter } from '../../types/frontmatter';

export const getStaticPaths = (async () => {
    const allPosts: Record<string, any>[] = await Astro.glob<Frontmatter>('../posts/*.md')
    const uniqueTags = [...new Set(allPosts.flatMap(post => post.frontmatter.tags))]
    const staticPaths = uniqueTags.map(tag => {
        const filteredPosts = allPosts.filter(post => post.frontmatter.tags?.includes(tag))
        return {
            params: { tag: tag }, 
            props: { posts: filteredPosts },
        }
    })
    return staticPaths
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts } = Astro.props as Props;
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map(post => <BlogPost title={post.frontmatter.title} date={post.frontmatter.pubDate} url={post.url} />)}
  </ul>
</BaseLayout>